/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package tsgsub;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author oubeichen
 */
public class SingLanDialog extends javax.swing.JDialog {

    /**
     * Creates new form SingLanDialog
     */
    public SingLanDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        //this.setLocationRelativeTo(null); 
        Reslist.setModel(new DefaultListModel());
        init();

    }

    private void init() {
        int i;
        totalstyles = Main.getAllstyle().size();
        for (i = 0; i < totalstyles; i++) {
            String tstring = Main.getAllstyle().get(i).toString();
            StyleComboBox.addItem(tstring);
            if (tstring.contains("中")) {
                StyleComboBox.setSelectedIndex(i);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StyleComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Reslist = new javax.swing.JList();
        Find = new javax.swing.JButton();
        isFindTimeCover = new javax.swing.JCheckBox();
        isFindLength = new javax.swing.JCheckBox();
        FindLength = new javax.swing.JTextField();
        isFindWrongStyle = new javax.swing.JCheckBox();
        isFindMultiLine = new javax.swing.JCheckBox();
        isFindOver = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("单语查错");

        jLabel1.setText("请选择中文样式的名称：");

        Reslist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ReslistMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Reslist);

        Find.setText("查找错误");
        Find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindActionPerformed(evt);
            }
        });

        isFindTimeCover.setSelected(true);
        isFindTimeCover.setText("查找时间轴覆盖(需要事先按时间顺序排序，并且只查找中文样式对应行）");

        isFindLength.setSelected(true);
        isFindLength.setText("查找字符串长度大于");

        FindLength.setText("30");
        FindLength.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindLengthActionPerformed(evt);
            }
        });

        isFindWrongStyle.setSelected(true);
        isFindWrongStyle.setText("查找不存在对应样式的字幕行");

        isFindMultiLine.setSelected(true);
        isFindMultiLine.setText("查找多行字幕（含有\\n）");

        isFindOver.setSelected(true);
        isFindOver.setText("查找结束早于等于开始");

        jLabel4.setText("请在AE中修改后重新打开，多次检查无错误后才可确保。还在不断完善，请见谅。");

        jLabel2.setText("双击下面的错误可在主窗口定位对应行的字幕。");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(isFindTimeCover)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addComponent(Find))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(130, 130, 130)
                                .addComponent(StyleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(isFindLength)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FindLength, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(isFindOver))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(isFindWrongStyle)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(isFindMultiLine))
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(StyleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isFindWrongStyle)
                    .addComponent(isFindMultiLine))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isFindLength)
                    .addComponent(FindLength, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(isFindOver))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Find)
                    .addComponent(isFindTimeCover, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FindLengthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindLengthActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FindLengthActionPerformed

    private void FindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FindActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss.S");
        Date tstart;
        Date tend;
        Date lastend;

        int total = Main.getStarttime().size(), i;
        DefaultListModel dlm = (DefaultListModel) Reslist.getModel();
        dlm.setSize(0);
        for (i = 0; i < total; i++) {
            String temp = Main.getContent().get(i).toString();
            String style = Main.getStyle().get(i).toString();
            try {
                tstart = sdf.parse(Main.getStarttime().get(i).toString());
                tend = sdf.parse(Main.getEndtime().get(i).toString());
            } catch (ParseException ex) {
                Logger.getLogger(SingLanDialog.class.getName()).log(Level.SEVERE, null, ex);
                javax.swing.JOptionPane.showMessageDialog(this, "第" + i + "行字幕时间格式有误", "错误", javax.swing.JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (isFindLength.isSelected())//判断长度
            {
                int findlen;
                try {
                    findlen = Integer.parseInt(FindLength.getText().toString());
                } catch (NumberFormatException e) {
                    javax.swing.JOptionPane.showMessageDialog(this, "输入的数字有误", "错误", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (temp.length() > findlen) {
                    dlm.addElement((int) (i + 1) + ": 这一行字幕长度为" + temp.length() + "，超出限制");
                }
            }
            if (isFindMultiLine.isSelected())//判断多行
            {
                if (temp.contains("\\n") || temp.contains("\\N")) {
                    dlm.addElement((int) (i + 1) + ": 这一行字幕包含\"\\n\"，将会显示为多行");
                }
            }
            if (isFindWrongStyle.isSelected())//判断错误样式
            {
                int j;
                for (j = 0; j < totalstyles; j++) {
                    if (StyleComboBox.getItemAt(j).equals(style)) {
                        break;
                    }
                }
                if (j == totalstyles) {
                    dlm.addElement((int) (i + 1) + ": 这一行字幕所使用的样式不在样式表里");
                }
            }
            if (isFindTimeCover.isSelected())//判断时间轴重叠
            {
                String zh = StyleComboBox.getSelectedItem().toString();
                if (zh.equals(style)) {
                    int j = i - 1;
                    while (j >= 0 && !Main.getStyle().get(j).toString().equals(zh)) {
                        j--;
                    }
                    if (j >= 0)//找到上一个字幕
                    {
                        try {
                            lastend = sdf.parse(Main.getEndtime().get(j).toString());
                        } catch (ParseException ex) {
                            Logger.getLogger(SingLanDialog.class.getName()).log(Level.SEVERE, null, ex);
                            javax.swing.JOptionPane.showMessageDialog(this, "第" + j + "行字幕时间格式有误", "错误", javax.swing.JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                        if (lastend.compareTo(tstart) > 0) {
                            dlm.addElement((int) (i + 1) + ": 这一行字幕和上一行中文样式字幕时间重叠");
                        }
                    }
                }
            }
            if (isFindOver.isSelected())//判断结束时间早于开始时间
            {
                if (tstart.compareTo(tend) >= 0) {
                    dlm.addElement((int) (i + 1) + ": 这一行字幕结束时间早于等于开始时间");
                }
            }
        }




    }//GEN-LAST:event_FindActionPerformed

    private void ReslistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ReslistMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            String temp = Reslist.getSelectedValue().toString();
            int selectedrow = Integer.parseInt(temp.split(":",2)[0]);
            Main.setSelectedRow(selectedrow);
        }
    }//GEN-LAST:event_ReslistMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SingLanDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SingLanDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SingLanDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SingLanDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SingLanDialog dialog = new SingLanDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Find;
    private javax.swing.JTextField FindLength;
    private javax.swing.JList Reslist;
    private javax.swing.JComboBox StyleComboBox;
    private javax.swing.JCheckBox isFindLength;
    private javax.swing.JCheckBox isFindMultiLine;
    private javax.swing.JCheckBox isFindOver;
    private javax.swing.JCheckBox isFindTimeCover;
    private javax.swing.JCheckBox isFindWrongStyle;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private int totalstyles;
}
